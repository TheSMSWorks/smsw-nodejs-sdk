/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BatchMessage from '../model/BatchMessage';
import BatchMessageResponse from '../model/BatchMessageResponse';
import CancelledMessageResponse from '../model/CancelledMessageResponse';
import ErrorModel from '../model/ErrorModel';
import ExtendedErrorModel from '../model/ExtendedErrorModel';
import MessageResponse from '../model/MessageResponse';
import ScheduledBatchResponse from '../model/ScheduledBatchResponse';

/**
* BatchMessages service.
* @module api/BatchMessagesApi
* @version 1.6.0
*/
export default class BatchMessagesApi {

    /**
    * Constructs a new BatchMessagesApi. 
    * @alias module:api/BatchMessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelScheduledBatchJob operation.
     * @callback module:api/BatchMessagesApi~cancelScheduledBatchJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelledMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled SMS message
     * @param {module:api/BatchMessagesApi~cancelScheduledBatchJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelledMessageResponse}
     */
    cancelScheduledBatchJob(batchid, callback) {
      let postBody = null;

      let pathParams = {
        'batchid': batchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CancelledMessageResponse;

      return this.apiClient.callApi(
        '/batches/schedule/{batchid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBatchById operation.
     * @callback module:api/BatchMessagesApi~getBatchByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all messages in a batch with the given batch ID
     * @param {module:api/BatchMessagesApi~getBatchByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageResponse>}
     */
    getBatchById(batchid, callback) {
      let postBody = null;

      let pathParams = {
        'batchid': batchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [MessageResponse];

      return this.apiClient.callApi(
        '/batch/{batchid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the scheduleBatch operation.
     * @callback module:api/BatchMessagesApi~scheduleBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a batch of SMS messages to be sent at the date time you specify
     * @param {module:api/BatchMessagesApi~scheduleBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledBatchResponse}
     */
    scheduleBatch(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ScheduledBatchResponse;

      return this.apiClient.callApi(
        '/batch/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendBatch operation.
     * @callback module:api/BatchMessagesApi~sendBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a single SMS message to multiple recipients
     * @param {module:api/BatchMessagesApi~sendBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchMessageResponse}
     */
    sendBatch(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = BatchMessageResponse;

      return this.apiClient.callApi(
        '/batch/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}

/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchMessage', 'model/BatchMessageResponse', 'model/CancelledMessageResponse', 'model/ErrorModel', 'model/ExtendedErrorModel', 'model/MessagesResponse', 'model/ScheduledBatchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchMessage'), require('../model/BatchMessageResponse'), require('../model/CancelledMessageResponse'), require('../model/ErrorModel'), require('../model/ExtendedErrorModel'), require('../model/MessagesResponse'), require('../model/ScheduledBatchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TheSmsWorksApi) {
      root.TheSmsWorksApi = {};
    }
    root.TheSmsWorksApi.BatchMessagesApi = factory(root.TheSmsWorksApi.ApiClient, root.TheSmsWorksApi.BatchMessage, root.TheSmsWorksApi.BatchMessageResponse, root.TheSmsWorksApi.CancelledMessageResponse, root.TheSmsWorksApi.ErrorModel, root.TheSmsWorksApi.ExtendedErrorModel, root.TheSmsWorksApi.MessagesResponse, root.TheSmsWorksApi.ScheduledBatchResponse);
  }
}(this, function(ApiClient, BatchMessage, BatchMessageResponse, CancelledMessageResponse, ErrorModel, ExtendedErrorModel, MessagesResponse, ScheduledBatchResponse) {
  'use strict';

  /**
   * BatchMessages service.
   * @module api/BatchMessagesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new BatchMessagesApi. 
   * @alias module:api/BatchMessagesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelScheduledBatchJob operation.
     * @callback module:api/BatchMessagesApi~cancelScheduledBatchJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelledMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled SMS message
     * @param {String} batchid The ID of the batch you would like returned
     * @param {module:api/BatchMessagesApi~cancelScheduledBatchJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelledMessageResponse}
     */
    this.cancelScheduledBatchJob = function(batchid, callback) {
      var postBody = null;

      // verify the required parameter 'batchid' is set
      if (batchid === undefined || batchid === null) {
        throw new Error("Missing the required parameter 'batchid' when calling cancelScheduledBatchJob");
      }


      var pathParams = {
        'batchid': batchid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = CancelledMessageResponse;

      return this.apiClient.callApi(
        '/batches/schedule/{batchid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchById operation.
     * @callback module:api/BatchMessagesApi~getBatchByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all messages in a batch with the given batch ID
     * @param {String} batchid The ID of the batch you would like returned
     * @param {module:api/BatchMessagesApi~getBatchByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesResponse}
     */
    this.getBatchById = function(batchid, callback) {
      var postBody = null;

      // verify the required parameter 'batchid' is set
      if (batchid === undefined || batchid === null) {
        throw new Error("Missing the required parameter 'batchid' when calling getBatchById");
      }


      var pathParams = {
        'batchid': batchid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MessagesResponse;

      return this.apiClient.callApi(
        '/batch/{batchid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleBatch operation.
     * @callback module:api/BatchMessagesApi~scheduleBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a batch of SMS messages to be sent at the date-time you specify
     * @param {module:model/BatchMessage} smsMessage Message properties
     * @param {module:api/BatchMessagesApi~scheduleBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledBatchResponse}
     */
    this.scheduleBatch = function(smsMessage, callback) {
      var postBody = smsMessage;

      // verify the required parameter 'smsMessage' is set
      if (smsMessage === undefined || smsMessage === null) {
        throw new Error("Missing the required parameter 'smsMessage' when calling scheduleBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ScheduledBatchResponse;

      return this.apiClient.callApi(
        '/batch/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendBatch operation.
     * @callback module:api/BatchMessagesApi~sendBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a single SMS message to multiple recipients
     * @param {module:model/BatchMessage} smsMessage Message properties
     * @param {module:api/BatchMessagesApi~sendBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchMessageResponse}
     */
    this.sendBatch = function(smsMessage, callback) {
      var postBody = smsMessage;

      // verify the required parameter 'smsMessage' is set
      if (smsMessage === undefined || smsMessage === null) {
        throw new Error("Missing the required parameter 'smsMessage' when calling sendBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = BatchMessageResponse;

      return this.apiClient.callApi(
        '/batch/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

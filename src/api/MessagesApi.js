/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CancelledMessageResponse', 'model/ErrorModel', 'model/ExtendedErrorModel', 'model/Message', 'model/MessageResponse', 'model/MessagesResponse', 'model/Query', 'model/ScheduledMessageResponse', 'model/SendMessageResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CancelledMessageResponse'), require('../model/ErrorModel'), require('../model/ExtendedErrorModel'), require('../model/Message'), require('../model/MessageResponse'), require('../model/MessagesResponse'), require('../model/Query'), require('../model/ScheduledMessageResponse'), require('../model/SendMessageResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TheSmsWorksApi) {
      root.TheSmsWorksApi = {};
    }
    root.TheSmsWorksApi.MessagesApi = factory(root.TheSmsWorksApi.ApiClient, root.TheSmsWorksApi.CancelledMessageResponse, root.TheSmsWorksApi.ErrorModel, root.TheSmsWorksApi.ExtendedErrorModel, root.TheSmsWorksApi.Message, root.TheSmsWorksApi.MessageResponse, root.TheSmsWorksApi.MessagesResponse, root.TheSmsWorksApi.Query, root.TheSmsWorksApi.ScheduledMessageResponse, root.TheSmsWorksApi.SendMessageResponse);
  }
}(this, function(ApiClient, CancelledMessageResponse, ErrorModel, ExtendedErrorModel, Message, MessageResponse, MessagesResponse, Query, ScheduledMessageResponse, SendMessageResponse) {
  'use strict';

  /**
   * Messages service.
   * @module api/MessagesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MessagesApi. 
   * @alias module:api/MessagesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelScheduledJob operation.
     * @callback module:api/MessagesApi~cancelScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelledMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled SMS message
     * @param {String} messageid The ID of the message you would like returned
     * @param {module:api/MessagesApi~cancelScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelledMessageResponse}
     */
    this.cancelScheduledJob = function(messageid, callback) {
      var postBody = null;

      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling cancelScheduledJob");
      }


      var pathParams = {
        'messageid': messageid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = CancelledMessageResponse;

      return this.apiClient.callApi(
        '/messages/schedule/{messageid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInboxMessages operation.
     * @callback module:api/MessagesApi~getInboxMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unread uncoming messages matching your search criteria
     * @param {module:model/Query} query 
     * @param {module:api/MessagesApi~getInboxMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesResponse}
     */
    this.getInboxMessages = function(query, callback) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getInboxMessages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MessagesResponse;

      return this.apiClient.callApi(
        '/messages/inbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageById operation.
     * @callback module:api/MessagesApi~getMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a logged message by the message ID
     * @param {String} messageid The ID of the message you would like returned
     * @param {module:api/MessagesApi~getMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    this.getMessageById = function(messageid, callback) {
      var postBody = null;

      // verify the required parameter 'messageid' is set
      if (messageid === undefined || messageid === null) {
        throw new Error("Missing the required parameter 'messageid' when calling getMessageById");
      }


      var pathParams = {
        'messageid': messageid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MessageResponse;

      return this.apiClient.callApi(
        '/messages/{messageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/MessagesApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get messages matching your search criteria
     * @param {module:model/Query} query 
     * @param {module:api/MessagesApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesResponse}
     */
    this.getMessages = function(query, callback) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getMessages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = MessagesResponse;

      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleMessage operation.
     * @callback module:api/MessagesApi~scheduleMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules an SMS message to be sent at the date-time you specify
     * @param {module:model/Message} smsMessage Message properties
     * @param {module:api/MessagesApi~scheduleMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledMessageResponse}
     */
    this.scheduleMessage = function(smsMessage, callback) {
      var postBody = smsMessage;

      // verify the required parameter 'smsMessage' is set
      if (smsMessage === undefined || smsMessage === null) {
        throw new Error("Missing the required parameter 'smsMessage' when calling scheduleMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ScheduledMessageResponse;

      return this.apiClient.callApi(
        '/message/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/MessagesApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an SMS message
     * @param {module:model/Message} smsMessage Message properties
     * @param {module:api/MessagesApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMessageResponse}
     */
    this.sendMessage = function(smsMessage, callback) {
      var postBody = smsMessage;

      // verify the required parameter 'smsMessage' is set
      if (smsMessage === undefined || smsMessage === null) {
        throw new Error("Missing the required parameter 'smsMessage' when calling sendMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = SendMessageResponse;

      return this.apiClient.callApi(
        '/message/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

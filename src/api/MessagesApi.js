/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CancelledMessageResponse from '../model/CancelledMessageResponse';
import DeletedMessageResponse from '../model/DeletedMessageResponse';
import ErrorModel from '../model/ErrorModel';
import ExtendedErrorModel from '../model/ExtendedErrorModel';
import Message from '../model/Message';
import MessageResponse from '../model/MessageResponse';
import Query from '../model/Query';
import ScheduledMessageResponse from '../model/ScheduledMessageResponse';
import ScheduledMessagesResponse from '../model/ScheduledMessagesResponse';
import SendMessageResponse from '../model/SendMessageResponse';

/**
* Messages service.
* @module api/MessagesApi
* @version 1.6.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancelScheduledJob operation.
     * @callback module:api/MessagesApi~cancelScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelledMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled SMS message
     * @param {module:api/MessagesApi~cancelScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelledMessageResponse}
     */
    cancelScheduledJob(messageid, callback) {
      let postBody = null;

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CancelledMessageResponse;

      return this.apiClient.callApi(
        '/messages/schedule/{messageid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteMessage operation.
     * @callback module:api/MessagesApi~deleteMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the message with the mathcing messageid
     * @param {module:api/MessagesApi~deleteMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedMessageResponse}
     */
    deleteMessage(messageid, callback) {
      let postBody = null;

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = DeletedMessageResponse;

      return this.apiClient.callApi(
        '/messages/{messageid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFailedMessages operation.
     * @callback module:api/MessagesApi~getFailedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get failed messages matching your search criteria
     * @param {module:api/MessagesApi~getFailedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageResponse>}
     */
    getFailedMessages(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [MessageResponse];

      return this.apiClient.callApi(
        '/messages/failed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInboxMessages operation.
     * @callback module:api/MessagesApi~getInboxMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unread uncoming messages matching your search criteria
     * @param {module:api/MessagesApi~getInboxMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageResponse>}
     */
    getInboxMessages(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [MessageResponse];

      return this.apiClient.callApi(
        '/messages/inbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMessageById operation.
     * @callback module:api/MessagesApi~getMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a logged message by the message ID
     * @param {module:api/MessagesApi~getMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    getMessageById(messageid, callback) {
      let postBody = null;

      let pathParams = {
        'messageid': messageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageResponse;

      return this.apiClient.callApi(
        '/messages/{messageid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/MessagesApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve up to 1000 messages matching your search criteria
     * @param {module:api/MessagesApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageResponse>}
     */
    getMessages(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [MessageResponse];

      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getScheduledMessages operation.
     * @callback module:api/MessagesApi~getScheduledMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
     * @param {module:api/MessagesApi~getScheduledMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledMessagesResponse}
     */
    getScheduledMessages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ScheduledMessagesResponse;

      return this.apiClient.callApi(
        '/messages/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the messageSendPost operation.
     * @callback module:api/MessagesApi~messageSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an SMS Message
     * @param {module:api/MessagesApi~messageSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMessageResponse}
     */
    messageSendPost(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SendMessageResponse;

      return this.apiClient.callApi(
        '/message/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the scheduleMessage operation.
     * @callback module:api/MessagesApi~scheduleMessageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduledMessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules an SMS message to be sent at the date-time you specify
     * @param {module:api/MessagesApi~scheduleMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduledMessageResponse>}
     */
    scheduleMessage(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ScheduledMessageResponse];

      return this.apiClient.callApi(
        '/message/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendFlashMessage operation.
     * @callback module:api/MessagesApi~sendFlashMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an SMS flash message, which appears on the recipients lock screen
     * @param {module:api/MessagesApi~sendFlashMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMessageResponse}
     */
    sendFlashMessage(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SendMessageResponse;

      return this.apiClient.callApi(
        '/message/flash', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}

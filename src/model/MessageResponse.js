/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageResponseFailurereason from './MessageResponseFailurereason';

/**
 * The MessageResponse model module.
 * @module model/MessageResponse
 * @version 1.9.0
 */
class MessageResponse {
    /**
     * Constructs a new <code>MessageResponse</code>.
     * @alias module:model/MessageResponse
     * @param content {String} 
     * @param created {String} 
     * @param customerid {String} 
     * @param destination {Number} 
     * @param messageid {String} 
     * @param modified {String} 
     * @param schedule {String} 
     * @param status {String} 
     * @param sender {String} 
     * @param tag {String} 
     */
    constructor(content, created, customerid, destination, messageid, modified, schedule, status, sender, tag) { 
        
        MessageResponse.initialize(this, content, created, customerid, destination, messageid, modified, schedule, status, sender, tag);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, created, customerid, destination, messageid, modified, schedule, status, sender, tag) { 
        obj['content'] = content;
        obj['created'] = created;
        obj['customerid'] = customerid;
        obj['destination'] = destination;
        obj['messageid'] = messageid;
        obj['modified'] = modified;
        obj['schedule'] = schedule;
        obj['status'] = status;
        obj['sender'] = sender;
        obj['tag'] = tag;
    }

    /**
     * Constructs a <code>MessageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageResponse} obj Optional instance to populate.
     * @return {module:model/MessageResponse} The populated <code>MessageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageResponse();

            if (data.hasOwnProperty('batchid')) {
                obj['batchid'] = ApiClient.convertToType(data['batchid'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('customerid')) {
                obj['customerid'] = ApiClient.convertToType(data['customerid'], 'String');
            }
            if (data.hasOwnProperty('deliveryreporturl')) {
                obj['deliveryreporturl'] = ApiClient.convertToType(data['deliveryreporturl'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'Number');
            }
            if (data.hasOwnProperty('failurereason')) {
                obj['failurereason'] = MessageResponseFailurereason.constructFromObject(data['failurereason']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('messageid')) {
                obj['messageid'] = ApiClient.convertToType(data['messageid'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['batchid'] && !(typeof data['batchid'] === 'string' || data['batchid'] instanceof String)) {
            throw new Error("Expected the field `batchid` to be a primitive type in the JSON string but got " + data['batchid']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['customerid'] && !(typeof data['customerid'] === 'string' || data['customerid'] instanceof String)) {
            throw new Error("Expected the field `customerid` to be a primitive type in the JSON string but got " + data['customerid']);
        }
        // ensure the json data is a string
        if (data['deliveryreporturl'] && !(typeof data['deliveryreporturl'] === 'string' || data['deliveryreporturl'] instanceof String)) {
            throw new Error("Expected the field `deliveryreporturl` to be a primitive type in the JSON string but got " + data['deliveryreporturl']);
        }
        // validate the optional field `failurereason`
        if (data['failurereason']) { // data not null
          MessageResponseFailurereason.validateJSON(data['failurereason']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['messageid'] && !(typeof data['messageid'] === 'string' || data['messageid'] instanceof String)) {
            throw new Error("Expected the field `messageid` to be a primitive type in the JSON string but got " + data['messageid']);
        }
        // ensure the json data is a string
        if (data['modified'] && !(typeof data['modified'] === 'string' || data['modified'] instanceof String)) {
            throw new Error("Expected the field `modified` to be a primitive type in the JSON string but got " + data['modified']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}

MessageResponse.RequiredProperties = ["content", "created", "customerid", "destination", "messageid", "modified", "schedule", "status", "sender", "tag"];

/**
 * @member {String} batchid
 */
MessageResponse.prototype['batchid'] = undefined;

/**
 * @member {String} content
 */
MessageResponse.prototype['content'] = undefined;

/**
 * @member {String} created
 */
MessageResponse.prototype['created'] = undefined;

/**
 * @member {String} customerid
 */
MessageResponse.prototype['customerid'] = undefined;

/**
 * @member {String} deliveryreporturl
 */
MessageResponse.prototype['deliveryreporturl'] = undefined;

/**
 * @member {Number} destination
 */
MessageResponse.prototype['destination'] = undefined;

/**
 * @member {module:model/MessageResponseFailurereason} failurereason
 */
MessageResponse.prototype['failurereason'] = undefined;

/**
 * @member {String} id
 */
MessageResponse.prototype['id'] = undefined;

/**
 * @member {String} identifier
 */
MessageResponse.prototype['identifier'] = undefined;

/**
 * @member {String} keyword
 */
MessageResponse.prototype['keyword'] = undefined;

/**
 * @member {String} messageid
 */
MessageResponse.prototype['messageid'] = undefined;

/**
 * @member {String} modified
 */
MessageResponse.prototype['modified'] = undefined;

/**
 * @member {String} schedule
 */
MessageResponse.prototype['schedule'] = undefined;

/**
 * @member {String} status
 */
MessageResponse.prototype['status'] = undefined;

/**
 * @member {String} sender
 */
MessageResponse.prototype['sender'] = undefined;

/**
 * @member {String} tag
 */
MessageResponse.prototype['tag'] = undefined;






export default MessageResponse;


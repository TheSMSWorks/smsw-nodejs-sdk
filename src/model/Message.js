/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageMetadata from './MessageMetadata';

/**
 * The Message model module.
 * @module model/Message
 * @version 1.8.0
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * SMS message object
     * @alias module:model/Message
     * @param sender {String} The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
     * @param destination {String} Telephone number of the recipient
     * @param content {String} Message to send to the recipient. Content can be up to 1280 characters in length. Messages of 160 characters or fewer are charged 1 credit. If your message is longer than 160 characters then it will be broken down in to chunks of 153 characters before being sent to the recipient's handset, and you will be charged 1 credit for each 153 characters. Messages sent to numbers registered outside the UK will be typically charged double credits, but for certain countries may be charged fractions of credits (e.g. 2.5). Please contact us for rates for each country.
     */
    constructor(sender, destination, content) { 
        
        Message.initialize(this, sender, destination, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sender, destination, content) { 
        obj['sender'] = sender;
        obj['destination'] = destination;
        obj['content'] = content;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('deliveryreporturl')) {
                obj['deliveryreporturl'] = ApiClient.convertToType(data['deliveryreporturl'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('responseemail')) {
                obj['responseemail'] = ApiClient.convertToType(data['responseemail'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = MessageMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Message.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['deliveryreporturl'] && !(typeof data['deliveryreporturl'] === 'string' || data['deliveryreporturl'] instanceof String)) {
            throw new Error("Expected the field `deliveryreporturl` to be a primitive type in the JSON string but got " + data['deliveryreporturl']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['responseemail'])) {
            throw new Error("Expected the field `responseemail` to be an array in the JSON data but got " + data['responseemail']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          MessageMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}

Message.RequiredProperties = ["sender", "destination", "content"];

/**
 * The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
 * @member {String} sender
 */
Message.prototype['sender'] = undefined;

/**
 * Telephone number of the recipient
 * @member {String} destination
 */
Message.prototype['destination'] = undefined;

/**
 * Message to send to the recipient. Content can be up to 1280 characters in length. Messages of 160 characters or fewer are charged 1 credit. If your message is longer than 160 characters then it will be broken down in to chunks of 153 characters before being sent to the recipient's handset, and you will be charged 1 credit for each 153 characters. Messages sent to numbers registered outside the UK will be typically charged double credits, but for certain countries may be charged fractions of credits (e.g. 2.5). Please contact us for rates for each country.
 * @member {String} content
 */
Message.prototype['content'] = undefined;

/**
 * The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.
 * @member {String} deliveryreporturl
 */
Message.prototype['deliveryreporturl'] = undefined;

/**
 * Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.
 * @member {String} schedule
 */
Message.prototype['schedule'] = undefined;

/**
 * An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.
 * @member {String} tag
 */
Message.prototype['tag'] = undefined;

/**
 * The optional number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.
 * @member {Number} ttl
 */
Message.prototype['ttl'] = undefined;

/**
 * An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.
 * @member {Array.<String>} responseemail
 */
Message.prototype['responseemail'] = undefined;

/**
 * @member {module:model/MessageMetadata} metadata
 */
Message.prototype['metadata'] = undefined;

/**
 * The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.
 * @member {Number} validity
 */
Message.prototype['validity'] = undefined;






export default Message;


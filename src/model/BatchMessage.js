/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchMessage model module.
 * @module model/BatchMessage
 * @version 1.9.0
 */
class BatchMessage {
    /**
     * Constructs a new <code>BatchMessage</code>.
     * SMS Message Batch
     * @alias module:model/BatchMessage
     * @param sender {String} The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
     * @param destinations {Array.<String>} Telephone numbers of each of the recipients
     * @param content {String} Message to send to the recipient
     */
    constructor(sender, destinations, content) { 
        
        BatchMessage.initialize(this, sender, destinations, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sender, destinations, content) { 
        obj['sender'] = sender;
        obj['destinations'] = destinations;
        obj['content'] = content;
    }

    /**
     * Constructs a <code>BatchMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchMessage} obj Optional instance to populate.
     * @return {module:model/BatchMessage} The populated <code>BatchMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchMessage();

            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], ['String']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('deliveryreporturl')) {
                obj['deliveryreporturl'] = ApiClient.convertToType(data['deliveryreporturl'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
            if (data.hasOwnProperty('ai')) {
                obj['ai'] = ApiClient.convertToType(data['ai'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchMessage.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['destinations'])) {
            throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['deliveryreporturl'] && !(typeof data['deliveryreporturl'] === 'string' || data['deliveryreporturl'] instanceof String)) {
            throw new Error("Expected the field `deliveryreporturl` to be a primitive type in the JSON string but got " + data['deliveryreporturl']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}

BatchMessage.RequiredProperties = ["sender", "destinations", "content"];

/**
 * The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
 * @member {String} sender
 */
BatchMessage.prototype['sender'] = undefined;

/**
 * Telephone numbers of each of the recipients
 * @member {Array.<String>} destinations
 */
BatchMessage.prototype['destinations'] = undefined;

/**
 * Message to send to the recipient
 * @member {String} content
 */
BatchMessage.prototype['content'] = undefined;

/**
 * The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.
 * @member {String} deliveryreporturl
 */
BatchMessage.prototype['deliveryreporturl'] = undefined;

/**
 * Date-time at which to send the batch. This is only used by the batch/schedule service.
 * @member {String} schedule
 */
BatchMessage.prototype['schedule'] = undefined;

/**
 * An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.
 * @member {String} tag
 */
BatchMessage.prototype['tag'] = undefined;

/**
 * The number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.
 * @member {Number} ttl
 */
BatchMessage.prototype['ttl'] = undefined;

/**
 * The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.
 * @member {Number} validity
 */
BatchMessage.prototype['validity'] = undefined;

/**
 * Used to determine whether The SMS Works AI Optimiser should be used in the event that the message is just longer than the 1 or 2 credit boundary. This setting overrides the AI Optimiser configuration on your SMS Works account.
 * @member {Boolean} ai
 */
BatchMessage.prototype['ai'] = undefined;






export default BatchMessage;


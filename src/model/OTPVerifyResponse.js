/**
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OTPVerifyResponse model module.
 * @module model/OTPVerifyResponse
 * @version 1.9.0
 */
class OTPVerifyResponse {
    /**
     * Constructs a new <code>OTPVerifyResponse</code>.
     * Response schema for the /otp/verify method
     * @alias module:model/OTPVerifyResponse
     */
    constructor() { 
        
        OTPVerifyResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OTPVerifyResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OTPVerifyResponse} obj Optional instance to populate.
     * @return {module:model/OTPVerifyResponse} The populated <code>OTPVerifyResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OTPVerifyResponse();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('passcode')) {
                obj['passcode'] = ApiClient.convertToType(data['passcode'], 'Number');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OTPVerifyResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OTPVerifyResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['expires'] && !(typeof data['expires'] === 'string' || data['expires'] instanceof String)) {
            throw new Error("Expected the field `expires` to be a primitive type in the JSON string but got " + data['expires']);
        }
        // ensure the json data is a string
        if (data['modified'] && !(typeof data['modified'] === 'string' || data['modified'] instanceof String)) {
            throw new Error("Expected the field `modified` to be a primitive type in the JSON string but got " + data['modified']);
        }

        return true;
    }


}



/**
 * The mobile number that the OTP was sent to
 * @member {String} destination
 */
OTPVerifyResponse.prototype['destination'] = undefined;

/**
 * The status of the OTP. If the passcode is used within the validity period then this will be 'VERIFIED', otherwise it will be 'EXPIRED'
 * @member {String} status
 */
OTPVerifyResponse.prototype['status'] = undefined;

/**
 * The passcode used.
 * @member {Number} passcode
 */
OTPVerifyResponse.prototype['passcode'] = undefined;

/**
 * The length of time in seconds for which the generated passcode is valid.
 * @member {Number} validity
 */
OTPVerifyResponse.prototype['validity'] = undefined;

/**
 * A JSON object storing data supplied when this passcode was generated, for use in your application.
 * @member {Object} metadata
 */
OTPVerifyResponse.prototype['metadata'] = undefined;

/**
 * The ISO 8601 date/time at which this OTP was created
 * @member {String} created
 */
OTPVerifyResponse.prototype['created'] = undefined;

/**
 * The ISO 8601 date/time at which this OTP expires
 * @member {String} expires
 */
OTPVerifyResponse.prototype['expires'] = undefined;

/**
 * The ISO 8601 date/time at which this OTP was modified (typically when it was verified)
 * @member {String} modified
 */
OTPVerifyResponse.prototype['modified'] = undefined;






export default OTPVerifyResponse;

